// Objective-C API for talking to github.com/centrifugal/centrifuge-mobile Go package.
//   gobind -lang=objc github.com/centrifugal/centrifuge-mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Centrifuge_H__
#define __Centrifuge_H__

@import Foundation;
#include "Universe.objc.h"


@class CentrifugeClient;
@class CentrifugeClientInfo;
@class CentrifugeConfig;
@class CentrifugeConnectEvent;
@class CentrifugeDisconnectEvent;
@class CentrifugeErrorEvent;
@class CentrifugeEventHub;
@class CentrifugeHistoryData;
@class CentrifugeJoinEvent;
@class CentrifugeLeaveEvent;
@class CentrifugeMessageEvent;
@class CentrifugePresenceData;
@class CentrifugePresenceStats;
@class CentrifugePrivateSign;
@class CentrifugePrivateSubEvent;
@class CentrifugePublication;
@class CentrifugePublishEvent;
@class CentrifugeSubscribeErrorEvent;
@class CentrifugeSubscribeSuccessEvent;
@class CentrifugeSubscription;
@class CentrifugeSubscriptionEventHub;
@class CentrifugeUnsubscribeEvent;
@protocol CentrifugeConnectHandler;
@class CentrifugeConnectHandler;
@protocol CentrifugeDisconnectHandler;
@class CentrifugeDisconnectHandler;
@protocol CentrifugeErrorHandler;
@class CentrifugeErrorHandler;
@protocol CentrifugeJoinHandler;
@class CentrifugeJoinHandler;
@protocol CentrifugeLeaveHandler;
@class CentrifugeLeaveHandler;
@protocol CentrifugeMessageHandler;
@class CentrifugeMessageHandler;
@protocol CentrifugePrivateSubHandler;
@class CentrifugePrivateSubHandler;
@protocol CentrifugePublishHandler;
@class CentrifugePublishHandler;
@protocol CentrifugeRefreshHandler;
@class CentrifugeRefreshHandler;
@protocol CentrifugeSubscribeErrorHandler;
@class CentrifugeSubscribeErrorHandler;
@protocol CentrifugeSubscribeSuccessHandler;
@class CentrifugeSubscribeSuccessHandler;
@protocol CentrifugeUnsubscribeHandler;
@class CentrifugeUnsubscribeHandler;

@protocol CentrifugeConnectHandler <NSObject>
- (void)onConnect:(CentrifugeClient*)p0 p1:(CentrifugeConnectEvent*)p1;
@end

@protocol CentrifugeDisconnectHandler <NSObject>
- (void)onDisconnect:(CentrifugeClient*)p0 p1:(CentrifugeDisconnectEvent*)p1;
@end

@protocol CentrifugeErrorHandler <NSObject>
- (void)onError:(CentrifugeClient*)p0 p1:(CentrifugeErrorEvent*)p1;
@end

@protocol CentrifugeJoinHandler <NSObject>
- (void)onJoin:(CentrifugeSubscription*)p0 p1:(CentrifugeJoinEvent*)p1;
@end

@protocol CentrifugeLeaveHandler <NSObject>
- (void)onLeave:(CentrifugeSubscription*)p0 p1:(CentrifugeLeaveEvent*)p1;
@end

@protocol CentrifugeMessageHandler <NSObject>
- (void)onMessage:(CentrifugeClient*)p0 p1:(CentrifugeMessageEvent*)p1;
@end

@protocol CentrifugePrivateSubHandler <NSObject>
- (NSString*)onPrivateSub:(CentrifugeClient*)p0 p1:(CentrifugePrivateSubEvent*)p1 error:(NSError**)error;
@end

@protocol CentrifugePublishHandler <NSObject>
- (void)onPublish:(CentrifugeSubscription*)p0 p1:(CentrifugePublishEvent*)p1;
@end

@protocol CentrifugeRefreshHandler <NSObject>
- (NSString*)onRefresh:(CentrifugeClient*)p0 error:(NSError**)error;
@end

@protocol CentrifugeSubscribeErrorHandler <NSObject>
- (void)onSubscribeError:(CentrifugeSubscription*)p0 p1:(CentrifugeSubscribeErrorEvent*)p1;
@end

@protocol CentrifugeSubscribeSuccessHandler <NSObject>
- (void)onSubscribeSuccess:(CentrifugeSubscription*)p0 p1:(CentrifugeSubscribeSuccessEvent*)p1;
@end

@protocol CentrifugeUnsubscribeHandler <NSObject>
- (void)onUnsubscribe:(CentrifugeSubscription*)p0 p1:(CentrifugeUnsubscribeEvent*)p1;
@end

/**
 * Client to connect to Centrifuge-based server or Centrifugo.
 */
@interface CentrifugeClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Close closes Client connection and cleans ups everything.
 */
- (BOOL)close:(NSError**)error;
/**
 * Connect dials to server and sends connect message.
 */
- (BOOL)connect:(NSError**)error;
/**
 * Disconnect client from server.
 */
- (BOOL)disconnect:(NSError**)error;
/**
 * NewSubscription allows to create new Subscription to channel.
 */
- (CentrifugeSubscription*)newSubscription:(NSString*)channel error:(NSError**)error;
/**
 * OnConnect is a function to handle connect event.
 */
- (void)onConnect:(id<CentrifugeConnectHandler>)handler;
/**
 * OnDisconnect is a function to handle disconnect event.
 */
- (void)onDisconnect:(id<CentrifugeDisconnectHandler>)handler;
/**
 * OnError is a function that will receive unhandled errors for logging.
 */
- (void)onError:(id<CentrifugeErrorHandler>)handler;
/**
 * OnMessage allows to process async message from server to client.
 */
- (void)onMessage:(id<CentrifugeMessageHandler>)handler;
/**
 * OnPrivateSub needed to handle private channel subscriptions.
 */
- (void)onPrivateSub:(id<CentrifugePrivateSubHandler>)handler;
/**
 * OnRefresh handles refresh event when client's credentials expired and must be refreshed.
 */
- (void)onRefresh:(id<CentrifugeRefreshHandler>)handler;
/**
 * Publish data into channel.
 */
- (BOOL)publish:(NSString*)channel data:(NSData*)data error:(NSError**)error;
/**
 * RPC allows to make RPC â€“ send data to server ant wait for response.
RPC handler must be registered on server.
 */
- (NSData*)rpc:(NSData*)data error:(NSError**)error;
/**
 * Send data to server asynchronously.
 */
- (BOOL)send:(NSData*)data error:(NSError**)error;
/**
 * SetConnectData allows to set data to send in connect message.
 */
- (void)setConnectData:(NSData*)data;
/**
 * SetHeader allows to set custom header sent in Upgrade HTTP request.
 */
- (void)setHeader:(NSString*)key value:(NSString*)value;
/**
 * SetToken allows to set connection token so client
authenticate itself on connect.
 */
- (void)setToken:(NSString*)token;
@end

/**
 * ClientInfo ...
 */
@interface CentrifugeClientInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)client;
- (void)setClient:(NSString*)v;
- (NSString*)user;
- (void)setUser:(NSString*)v;
- (NSData*)connInfo;
- (void)setConnInfo:(NSData*)v;
- (NSData*)chanInfo;
- (void)setChanInfo:(NSData*)v;
@end

/**
 * Config contains various client options.
 */
@interface CentrifugeConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (long)readTimeoutMilliseconds;
- (void)setReadTimeoutMilliseconds:(long)v;
- (long)writeTimeoutMilliseconds;
- (void)setWriteTimeoutMilliseconds:(long)v;
- (long)pingIntervalMilliseconds;
- (void)setPingIntervalMilliseconds:(long)v;
- (NSString*)privateChannelPrefix;
- (void)setPrivateChannelPrefix:(NSString*)v;
@end

/**
 * ConnectEvent is a connect event context passed to OnConnect callback.
 */
@interface CentrifugeConnectEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)clientID;
- (void)setClientID:(NSString*)v;
- (NSString*)version;
- (void)setVersion:(NSString*)v;
- (NSData*)data;
- (void)setData:(NSData*)v;
@end

/**
 * DisconnectEvent is a disconnect event context passed to OnDisconnect callback.
 */
@interface CentrifugeDisconnectEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)reason;
- (void)setReason:(NSString*)v;
- (BOOL)reconnect;
- (void)setReconnect:(BOOL)v;
@end

/**
 * ErrorEvent is an error event context passed to OnError callback.
 */
@interface CentrifugeErrorEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)message;
- (void)setMessage:(NSString*)v;
@end

/**
 * EventHub ...
 */
@interface CentrifugeEventHub : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewEventHub ...
 */
- (instancetype)init;
@end

/**
 * HistoryData ...
 */
@interface CentrifugeHistoryData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * ItemAt to get Publication by index.
 */
- (CentrifugePublication*)itemAt:(long)i;
/**
 * NumItems to get total number of Publication items in collection.
 */
- (long)numItems;
@end

/**
 * JoinEvent has info about user who joined channel.
 */
@interface CentrifugeJoinEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)client;
- (void)setClient:(NSString*)v;
- (NSString*)user;
- (void)setUser:(NSString*)v;
- (NSData*)connInfo;
- (void)setConnInfo:(NSData*)v;
- (NSData*)chanInfo;
- (void)setChanInfo:(NSData*)v;
@end

/**
 * LeaveEvent has info about user who left channel.
 */
@interface CentrifugeLeaveEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)client;
- (void)setClient:(NSString*)v;
- (NSString*)user;
- (void)setUser:(NSString*)v;
- (NSData*)connInfo;
- (void)setConnInfo:(NSData*)v;
- (NSData*)chanInfo;
- (void)setChanInfo:(NSData*)v;
@end

/**
 * MessageEvent is an event for async message from server to client.
 */
@interface CentrifugeMessageEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSData*)data;
- (void)setData:(NSData*)v;
@end

/**
 * PresenceData contains presence information for channel.
 */
@interface CentrifugePresenceData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * ItemAt to get ClientInfo by index.
 */
- (CentrifugeClientInfo*)itemAt:(long)i;
/**
 * NumItems to get total number of ClientInfo items in collection.
 */
- (long)numItems;
@end

/**
 * PresenceStats ...
 */
@interface CentrifugePresenceStats : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (long)numClients;
- (void)setNumClients:(long)v;
- (long)numUsers;
- (void)setNumUsers:(long)v;
@end

/**
 * PrivateSign confirmes that client can subscribe on private channel.
 */
@interface CentrifugePrivateSign : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)token;
- (void)setToken:(NSString*)v;
@end

/**
 * PrivateSubEvent contains info required to create PrivateSign when client
wants to subscribe on private channel.
 */
@interface CentrifugePrivateSubEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)clientID;
- (void)setClientID:(NSString*)v;
- (NSString*)channel;
- (void)setChannel:(NSString*)v;
@end

/**
 * Publication ...
 */
@interface CentrifugePublication : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)uid;
- (void)setUID:(NSString*)v;
- (NSData*)data;
- (void)setData:(NSData*)v;
- (CentrifugeClientInfo*)info;
- (void)setInfo:(CentrifugeClientInfo*)v;
@end

/**
 * PublishEvent has info about received channel Publication.
 */
@interface CentrifugePublishEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)uid;
- (void)setUID:(NSString*)v;
- (NSData*)data;
- (void)setData:(NSData*)v;
- (CentrifugeClientInfo*)info;
- (void)setInfo:(CentrifugeClientInfo*)v;
@end

/**
 * SubscribeErrorEvent is a subscribe error event context passed to
event callback.
 */
@interface CentrifugeSubscribeErrorEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)error;
- (void)setError:(NSString*)v;
@end

/**
 * SubscribeSuccessEvent is a subscribe success event context passed
to event callback.
 */
@interface CentrifugeSubscribeSuccessEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (BOOL)resubscribed;
- (void)setResubscribed:(BOOL)v;
- (BOOL)recovered;
- (void)setRecovered:(BOOL)v;
@end

/**
 * Subscription describes client subscription to channel.
 */
@interface CentrifugeSubscription : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
/**
 * Channel returns subscription channel.
 */
- (NSString*)channel;
/**
 * History allows to extract channel history.
 */
- (CentrifugeHistoryData*)history:(NSError**)error;
- (void)onJoin:(id<CentrifugeJoinHandler>)handler;
- (void)onLeave:(id<CentrifugeLeaveHandler>)handler;
- (void)onPublish:(id<CentrifugePublishHandler>)handler;
- (void)onSubscribeError:(id<CentrifugeSubscribeErrorHandler>)handler;
- (void)onSubscribeSuccess:(id<CentrifugeSubscribeSuccessHandler>)handler;
- (void)onUnsubscribe:(id<CentrifugeUnsubscribeHandler>)handler;
/**
 * Presence allows to extract presence information for channel.
 */
- (CentrifugePresenceData*)presence:(NSError**)error;
/**
 * PresenceStats allows to extract presence stats information for channel.
 */
- (CentrifugePresenceStats*)presenceStats:(NSError**)error;
/**
 * Publish allows to publish JSON encoded data to subscription channel.
 */
- (BOOL)publish:(NSData*)data error:(NSError**)error;
/**
 * Subscribe allows to subscribe again after unsubscribing.
 */
- (BOOL)subscribe:(NSError**)error;
/**
 * Unsubscribe allows to unsubscribe from channel.
 */
- (BOOL)unsubscribe:(NSError**)error;
@end

/**
 * SubscriptionEventHub ...
 */
@interface CentrifugeSubscriptionEventHub : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewSubscriptionEventHub initializes new SubscriptionEventHub.
 */
- (instancetype)init;
@end

/**
 * UnsubscribeEvent is an event passed to unsubscribe event handler.
 */
@interface CentrifugeUnsubscribeEvent : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
@end

/**
 * Config defaults.
 */
FOUNDATION_EXPORT const int64_t CentrifugeDefaultPingIntervalMilliseconds;
/**
 * Config defaults.
 */
FOUNDATION_EXPORT NSString* const CentrifugeDefaultPrivateChannelPrefix;
/**
 * Config defaults.
 */
FOUNDATION_EXPORT const int64_t CentrifugeDefaultReadTimeoutMilliseconds;
/**
 * Config defaults.
 */
FOUNDATION_EXPORT const int64_t CentrifugeDefaultWriteTimeoutMilliseconds;

/**
 * DefaultConfig returns Config with default options.
 */
FOUNDATION_EXPORT CentrifugeConfig* CentrifugeDefaultConfig(void);

/**
 * New initializes Client.
 */
FOUNDATION_EXPORT CentrifugeClient* CentrifugeNew(NSString* u, CentrifugeConfig* config);

/**
 * NewEventHub ...
 */
FOUNDATION_EXPORT CentrifugeEventHub* CentrifugeNewEventHub(void);

/**
 * NewSubscriptionEventHub initializes new SubscriptionEventHub.
 */
FOUNDATION_EXPORT CentrifugeSubscriptionEventHub* CentrifugeNewSubscriptionEventHub(void);

@class CentrifugeConnectHandler;

@class CentrifugeDisconnectHandler;

@class CentrifugeErrorHandler;

@class CentrifugeJoinHandler;

@class CentrifugeLeaveHandler;

@class CentrifugeMessageHandler;

@class CentrifugePrivateSubHandler;

@class CentrifugePublishHandler;

@class CentrifugeRefreshHandler;

@class CentrifugeSubscribeErrorHandler;

@class CentrifugeSubscribeSuccessHandler;

@class CentrifugeUnsubscribeHandler;

/**
 * ConnectHandler is an interface describing how to handle connect event.
 */
@interface CentrifugeConnectHandler : NSObject <goSeqRefInterface, CentrifugeConnectHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onConnect:(CentrifugeClient*)p0 p1:(CentrifugeConnectEvent*)p1;
@end

/**
 * DisconnectHandler is an interface describing how to handle disconnect event.
 */
@interface CentrifugeDisconnectHandler : NSObject <goSeqRefInterface, CentrifugeDisconnectHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onDisconnect:(CentrifugeClient*)p0 p1:(CentrifugeDisconnectEvent*)p1;
@end

/**
 * ErrorHandler is an interface describing how to handle error event.
 */
@interface CentrifugeErrorHandler : NSObject <goSeqRefInterface, CentrifugeErrorHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onError:(CentrifugeClient*)p0 p1:(CentrifugeErrorEvent*)p1;
@end

/**
 * JoinHandler is a function to handle join messages.
 */
@interface CentrifugeJoinHandler : NSObject <goSeqRefInterface, CentrifugeJoinHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onJoin:(CentrifugeSubscription*)p0 p1:(CentrifugeJoinEvent*)p1;
@end

/**
 * LeaveHandler is a function to handle leave messages.
 */
@interface CentrifugeLeaveHandler : NSObject <goSeqRefInterface, CentrifugeLeaveHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onLeave:(CentrifugeSubscription*)p0 p1:(CentrifugeLeaveEvent*)p1;
@end

/**
 * MessageHandler is an interface describing how to async message from server.
 */
@interface CentrifugeMessageHandler : NSObject <goSeqRefInterface, CentrifugeMessageHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onMessage:(CentrifugeClient*)p0 p1:(CentrifugeMessageEvent*)p1;
@end

/**
 * PrivateSubHandler is an interface describing how to handle private subscription request.
 */
@interface CentrifugePrivateSubHandler : NSObject <goSeqRefInterface, CentrifugePrivateSubHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (NSString*)onPrivateSub:(CentrifugeClient*)p0 p1:(CentrifugePrivateSubEvent*)p1 error:(NSError**)error;
@end

/**
 * PublishHandler is a function to handle messages published in
channels.
 */
@interface CentrifugePublishHandler : NSObject <goSeqRefInterface, CentrifugePublishHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onPublish:(CentrifugeSubscription*)p0 p1:(CentrifugePublishEvent*)p1;
@end

/**
 * RefreshHandler is an interface describing how to handle credentials refresh event.
 */
@interface CentrifugeRefreshHandler : NSObject <goSeqRefInterface, CentrifugeRefreshHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (NSString*)onRefresh:(CentrifugeClient*)p0 error:(NSError**)error;
@end

/**
 * SubscribeErrorHandler is a function to handle subscribe error event.
 */
@interface CentrifugeSubscribeErrorHandler : NSObject <goSeqRefInterface, CentrifugeSubscribeErrorHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onSubscribeError:(CentrifugeSubscription*)p0 p1:(CentrifugeSubscribeErrorEvent*)p1;
@end

/**
 * SubscribeSuccessHandler is a function to handle subscribe success
event.
 */
@interface CentrifugeSubscribeSuccessHandler : NSObject <goSeqRefInterface, CentrifugeSubscribeSuccessHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onSubscribeSuccess:(CentrifugeSubscription*)p0 p1:(CentrifugeSubscribeSuccessEvent*)p1;
@end

/**
 * UnsubscribeHandler is a function to handle unsubscribe event.
 */
@interface CentrifugeUnsubscribeHandler : NSObject <goSeqRefInterface, CentrifugeUnsubscribeHandler> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (void)onUnsubscribe:(CentrifugeSubscription*)p0 p1:(CentrifugeUnsubscribeEvent*)p1;
@end

#endif
